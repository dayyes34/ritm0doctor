const sequencerConfig = {
    blocksCount: 4, // —Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º?
  
    rows: [          // –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—è–¥–æ–≤
      { id: 'rh', enabled: true, label: 'Right Hand' },          
      { id: 'lh', enabled: true, label: 'Left Hand' },            
      { id: 'rf', enabled: true, label: 'Right Foot' },
      { id: 'lf', enabled: true, label: 'Left Foot' }
    ],
  
    cellsPerRow: [   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–∞–º (–∫–∞–∂–¥—ã–π –±–ª–æ–∫ - –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç)
      // rh, lh, rf, lf (–ø–æ—Ä—è–¥–æ–∫ –∏–∑ –º–∞—Å—Å–∏–≤–∞ rows –≤—ã—à–µ)
      { rh:4, lh:4, rf:4, lf:4 }, // –±–ª–æ–∫ 1
      { rh:4, lh:4, rf:4, lf:4 }, // –±–ª–æ–∫ 2
      { rh:4, lh:4, rf:4, lf:4 }, // –±–ª–æ–∫ 3
      { rh:4, lh:4, rf:4, lf:4 }  // –±–ª–æ–∫ 4
    ]
  };  

// –æ–¥–Ω–∞ —è—á–µ–π–∫–∞
function createCell(){
    const cell = document.createElement('div');
    cell.classList.add('cell');
    return cell;
  }
  
  // —Ä—è–¥
  function createRow(rowId, cellsCount, limbCode) {
  const row = document.createElement('div');
  row.classList.add('cells-row', `row-${rowId}`);
  row.dataset.limb = limbCode; // <-- –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Ä—è–¥ –∫ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
  row.style.setProperty('--cells-count', cellsCount);

  // —Å–æ–∑–¥–∞—ë–º —Å–∞–º–∏ —è—á–µ–π–∫–∏
  for(let i=0; i<cellsCount; i++){
    row.appendChild(createCell());
  }

  // —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–ª—è –º–µ–Ω–µ–µ —á–µ–º 4 —è—á–µ–µ–∫
  if (cellsCount < 4) {
    row.style.display = 'flex';
    row.style.justifyContent = 'center';
    row.style.gap = '5px';
    row.querySelectorAll('.cell').forEach(cell => {
      cell.style.width = '35px';
      cell.style.flexShrink = '0';
    });
  }

  return row;
}

  
  // —Ü–µ–ª—ã–π –±–ª–æ–∫ (—É—á–∏—Ç—ã–≤–∞–µ—Ç rows global-config)
  function createBlock(blockCellsConfig, globalRowsConfig){
    const block = document.createElement('div');
    block.classList.add('block');
  
    globalRowsConfig.forEach(({id, enabled, limb}) => { // <-- –ø–æ–ª—É—á–∏–ª–∏ limb —Ç—É—Ç
      if(enabled){
        block.appendChild(createRow(id, blockCellsConfig[id], limb)); // <-- –ø–µ—Ä–µ–¥–∞–µ–º limb
      }
    });
  
    return block;
  }
  
  
  // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
  function generateSequencer(sequencerConfig){
    const container=document.getElementById('sequencer');
    container.innerHTML='';
  
    const {blocksCount, rows, cellsPerRow}=sequencerConfig;
  
    for(let i=0;i<blocksCount;i++){
      const blockConfig = cellsPerRow[i] || {};
      rows.forEach(r=>{
        if(blockConfig[r.id]===undefined) blockConfig[r.id]=4;
      });
  
      container.appendChild(createBlock(blockConfig, rows));
    }
  }
  
  
  // üëá –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ–≥–∫–æ –∏ –∫—Ä–∞—Å–∏–≤–æ:
  generateSequencer(sequencerConfig);
  